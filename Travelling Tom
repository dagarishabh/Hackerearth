//http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/
#include <bits/stdc++.h>
#include<list>
using namespace std;
int visit[100001];
// Graph class represents a directed graph using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    void DFSUtil(int v, bool visited[]);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS(int v);    // DFS traversal of the vertices reachable from v
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to vâ€™s list.
}
 
void Graph::DFSUtil(int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
    visit[v]=1;
    //cout << v +1<< " ";
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i, visited);
}
 
// DFS traversal of the vertices reachable from v. 
// It uses recursive DFSUtil()
void Graph::DFS(int v)
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;
 
    // Call the recursive helper function to print DFS traversal
    DFSUtil(v, visited);
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	long long int n,m,k,u,v;
	cin>>n>>m>>k;
	long long int a[k],a1[k],sum=0,i,j,b[m][k+1],c[m],d[m][3];
	for(i=0;i<k;i++)
	{
	    cin>>a[i];
	    sum+=a[i];
	    a1[i]=0;
	}
	Graph g(n);
    
	for(i=0;i<m;i++)
	{
	    c[i]=0;
	    cin>>u>>v;
	    u--;
	    v--;
	    d[i][0]=u;
	    d[i][1]=v;
	    d[i][2]=0;
	    g.addEdge(u,v);
	    g.addEdge(v,u);
	    cin>>b[i][0];
	    long long int f=b[i][0];
	    j=1;
	    while(f--)
	    {
	        cin>>b[i][j++];
	    }
	}
//	for(i=0;i<m;i++)
//	cout<<d[i][0]<<" "<<d[i][1]<<endl;
//	for(i=0;i<m;i++)
//	cout<<b[i][0]<<" ";cout<<endl;
	for(i=0;i<n;i++)
	visit[i]=0;
	g.DFS(0);
	//for(i=0;i<n;i++)
	//cout<<visit[i]<<" ";cout<<endl;
 
	for(i=0;i<n;i++)
	if(visit[i]==0)
	{
	    break;
	    //cout<<-1<<endl;
	    //return 0;
    }
	if(i!=n)
	sum=-1;
	else
	{
	 //   cout<<"kk";
	    for(i=0;i<n;i++)
	    visit[i]=0;
	    for(i=k-1;i>=0;i--)
	    {
	        Graph g1(n);
	        for(j=0;j<m;j++)
	        {
	            int p=0;
	            for(long long int z=1;z<=b[j][0];z++)
	            {
	                if(b[j][z]==i+1)
	                {
	                    //cout<<"ff";
	                    p=1;
	                    break;
	                }
	            }
	            if(p!=1&&d[j][2]==0)
	            {
//	                cout<<"edges->:"<<d[j][0]<<" "<<d[j][1]<<endl;
	                g1.addEdge(d[j][0],d[j][1]);
	                g1.addEdge(d[j][1],d[j][0]);
	                c[j]=1;
	            }
	            else
	            c[j]=0;
	            
	        }
	        g1.DFS(0);
	        for(j=0;j<n;j++)
	        if(visit[j]!=1)
	        {
	            break;
	        }
	        
	        if(j==n)
	        {
	            for(j=0;j<m;j++)
	            if(c[j]==0)
	            d[j][2]=1;
	            sum-=a[i];
	            a1[i]=1;
	        }
//	        cout<<endl;
//	        for(j=0;j<k;j++)
//	        cout<<a1[j]<<".";
//	        cout<<endl;
//	        cout<<sum<<endl;
	        for(j=0;j<n;j++)
	        visit[j]=0;
	        
	    }
	}
	cout<<sum<<endl;
	return 0;
}
Language: C++
